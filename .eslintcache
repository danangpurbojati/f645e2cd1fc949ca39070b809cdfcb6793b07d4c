[{"E:\\Latihan\\3 - demo react\\7 - kulina front end challange\\kulina-frontend\\src\\index.js":"1","E:\\Latihan\\3 - demo react\\7 - kulina front end challange\\kulina-frontend\\src\\App.js":"2","E:\\Latihan\\3 - demo react\\7 - kulina front end challange\\kulina-frontend\\src\\reportWebVitals.js":"3","E:\\Latihan\\3 - demo react\\7 - kulina front end challange\\kulina-frontend\\src\\DummyFood.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":8473,"mtime":1608687086906,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":1170,"mtime":1608655619289,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1gorml6",{"filePath":"13","messages":"14","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Latihan\\3 - demo react\\7 - kulina front end challange\\kulina-frontend\\src\\index.js",[],["20","21"],"E:\\Latihan\\3 - demo react\\7 - kulina front end challange\\kulina-frontend\\src\\App.js",["22","23","24"],"import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport menu from './assets/menu1.jpg';\nimport Modal from '@material-ui/core/Modal';\nimport Rating from '@material-ui/lab/Rating';\nimport { withStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AddIcon from '@material-ui/icons/Add';\nimport LocalGroceryStoreOutlinedIcon from '@material-ui/icons/LocalGroceryStoreOutlined';\nimport ArrowForwardIosOutlinedIcon from '@material-ui/icons/ArrowForwardIosOutlined';\nimport CloseOutlinedIcon from '@material-ui/icons/CloseOutlined';\nimport RoomOutlinedIcon from '@material-ui/icons/RoomOutlined';\n\nimport { Splide, SplideSlide } from '@splidejs/react-splide';\nimport '@splidejs/splide/dist/css/themes/splide-default.min.css';\n\nimport moment from 'moment';\nimport foods from './DummyFood';\n\n\nfunction App() {\n  const [meals, setMeal] = useState([]);\n  const [showSearch, setShowSearch] = useState(false)\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [dinnerActive, setdinnerActive] = useState(true)\n  const [showDinner, setShowDinner] = useState(true);\n  const [scrollPos, setScrollPos] = useState(0);\n  const [dates, setDate] = useState([]);\n  const [prices, setPrice] = useState(0);\n  const [items, setItem] = useState(0);\n  const [datePick, setDatePick] = useState(new Date());\n\n  const handleAddClick = (event) => {\n    let priceInteger = parseInt(event.target.value);\n    setPrice(prices + priceInteger);\n    setItem(items + 1);\n  }\n  \n  const handleScroll = () => {\n    const currentScrollPos = window.pageYOffset;\n    // setShowDinner((scrollPos > currentScrollPos && scrollPos - currentScrollPos > 30) || currentScrollPos < 10);\n    setShowDinner(scrollPos > currentScrollPos);\n    setScrollPos(currentScrollPos)\n  }\n\n  const getDatesBetweenDates = (startDate, endDate) => {\n    let dates = [];\n    const theDate = new Date(startDate);\n    while (theDate < endDate) {\n      dates = [...dates, new Date(theDate)];\n      theDate.setDate(theDate.getDate() + 1);\n    }\n    return dates;\n  }\n\n  const onChangeSearch = event => {\n    if(event.target.value.length > 2){\n      setShowSearch(true);\n    }else{\n      setShowSearch(false);\n    }\n  }\n\n  const setDatePickHandler = (tes) => {\n    setDatePick(tes);\n  }\n\n  const numberWithCommas = number => {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  useEffect(() => {\n    setMeal(foods)\n  }, [meals])\n\n  useEffect(() => {\n    let today = new Date();\n    let twoWeeks = new Date(today);\n    twoWeeks.setDate(twoWeeks.getDate() + 14);\n    setDate(getDatesBetweenDates(today, twoWeeks));\n  }, [])\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  },[scrollPos, showDinner])\n\n  const StyledRating = withStyles({\n    iconFilled:{\n      color: \"#f9423a\"\n    }\n  })(Rating);\n  return (\n    <div>\n\n      <div className=\"navbar\">      \n        <div className=\"location\">\n          <a className=\"back-button\" href=\"/#\">\n            <ArrowBackIcon />\n          </a>\n          <button onClick={() => setIsModalOpen(true)} className=\"location-button\">\n            <p>ALAMAT PENGANTARAN</p>\n            <h4>Tokopedia Tower <span><ExpandMoreIcon /></span></h4>\n          </button>\n        </div>\n\n        <Modal className=\"modal-container\" open={isModalOpen} onClose={() => setIsModalOpen(false)}>\n          <div className=\"modal-content\">\n              <button onClick={() => setIsModalOpen(false)} className=\"close-button\">\n                <CloseOutlinedIcon />\n              </button>\n              <div className=\"modal-text\">\n                <h3>Cek makanan yang tersedia di lokasi kamu</h3>\n                <div className=\"search-container\">\n                  <RoomOutlinedIcon className=\"search-icon\" />\n                  <input onChange={onChangeSearch} className=\"search-location\" type=\"text\"/>\n                </div>\n                {\n                  showSearch && (\n                    <div className=\"search-result\">\n                      <div className=\"result-detail\">\n                        <RoomOutlinedIcon />\n                        <div className=\"result-text\">\n                          <p>Kulina</p>\n                          <p>jl abc gang def komplex zef</p>\n                        </div>\n                      </div>\n                      <div className=\"result-detail\">\n                        <RoomOutlinedIcon />\n                        <div className=\"result-text\">\n                          <p>Kulina</p>\n                          <p>jl abc gang def komplex zef</p>\n                        </div>\n                      </div>              \n                    </div>\n                  )\n                }\n                \n              </div>\n          </div>\n        </Modal> \n\n        \n        <Splide\n          className=\"date-container\"\n          options={ {\n            perPage: 7,\n            pagination: false,\n            arrows: false,\n            autowidth: true\n          } }\n        > \n        {\n          dates.map(date => (\n            (moment(date).format('ddd') === \"Sat\" || moment(date).format('ddd') === \"Sun\") ? (\n              <SplideSlide key={date} >\n                <button disabled className=\"date\">\n                  <p className=\"day\">{moment(date).format('ddd')}</p>\n                  <p className=\"date-number\">{moment(date).format('DD')}</p>\n                </button>\n              </SplideSlide>\n            ):(\n              <SplideSlide key={date} >\n                <button \n                  style={(moment(datePick).format('DD') === moment(date).format('DD')) ? {backgroundColor: \"#424749\", color: \"white\"} : {backgroundColor: \"white\"}}\n                  onClick={() => setDatePickHandler(date)}\n                  className=\"date\">\n                  <p className=\"day\">{moment(date).format('ddd')}</p>\n                  <p className=\"date-number\">{moment(date).format('DD')}</p>\n                </button>\n              </SplideSlide>\n            )\n            \n          ))\n        }\n                 \n        </Splide>\n\n\n        <div style={showDinner ? {display: \"block\"} : {display: \"none\"}} className=\"having-time\">\n          <button onClick={() => setdinnerActive(!dinnerActive)} className=\"lunch\" \n            style={dinnerActive ? {backgroundColor: \"#424749\"} : {backgroundColor: \"white\"}}\n          >Lunch</button>\n          <button\n            style={dinnerActive ? {backgroundColor: \"white\"} : {backgroundColor: \"#424749\"} }\n           onClick={() => setdinnerActive(!dinnerActive)} className=\"dinner\">Dinner</button>\n        </div>     \n\n      </div>\n\n\n\n\n\n      <div className=\"App\">\n        <h1 className=\"card-text-title\">{moment(datePick).format(\"ddd, DD MMMM YYYY\")}</h1>\n\n        {\n          meals.map(meal => (\n            <div key={meal.id} className=\"card\">\n              <img src={meal.imgSrc} alt=\"menu\" />\n              <div className=\"card-text\">\n                <div className=\"rating\">\n                  <p className=\"card-text-subtext\">{meal.rating}</p>\n                  <StyledRating precision={0.5} name=\"disabled\" value={meal.rating} disabled />\n                </div>\n                <h3 className=\"card-text-title\">{meal.name}</h3>\n                <p className=\"card-text-subtext\">by kulina Uptown Lunch</p>\n                <div className=\"price\">\n                  <p>{numberWithCommas(meal.price)}</p>\n                  <button value={meal.price} onClick={handleAddClick} className=\"add-button\">\n                    ADD &#43;\n                  </button>\n                </div> \n              </div>\n            </div>        \n\n          ))\n        }\n\n      </div>\n\n\n\n      {\n        (prices > 0) && (\n          <div className=\"cart-container\">\n            <div className=\"cart\">\n              <div className=\"cart-text\">\n                <p className=\"cart-price\">\n                  <span>{items} Items</span>\n                  <span>|</span>\n                  <span>Rp {numberWithCommas(prices)}</span>\n                </p>\n                <p className=\"cart-info\">termasuk ongkos kirim</p>\n              </div>\n              <div className=\"cart-icon\">\n                <LocalGroceryStoreOutlinedIcon />\n                <ArrowForwardIosOutlinedIcon />\n              </div>\n            </div>\n          </div>\n        )\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","E:\\Latihan\\3 - demo react\\7 - kulina front end challange\\kulina-frontend\\src\\reportWebVitals.js",[],"E:\\Latihan\\3 - demo react\\7 - kulina front end challange\\kulina-frontend\\src\\DummyFood.js",[],{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":3,"column":8,"nodeType":"31","messageId":"32","endLine":3,"endColumn":12},{"ruleId":"29","severity":1,"message":"33","line":9,"column":8,"nodeType":"31","messageId":"32","endLine":9,"endColumn":15},{"ruleId":"34","severity":1,"message":"35","line":87,"column":5,"nodeType":"36","endLine":87,"endColumn":28,"suggestions":"37"},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'menu' is defined but never used.","Identifier","unusedVar","'AddIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleScroll'. Either include it or remove the dependency array.","ArrayExpression",["40"],"no-global-assign","no-unsafe-negation",{"desc":"41","fix":"42"},"Update the dependencies array to be: [handleScroll, scrollPos, showDinner]",{"range":"43","text":"44"},[2866,2889],"[handleScroll, scrollPos, showDinner]"]